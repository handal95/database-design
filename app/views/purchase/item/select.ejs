<!DOCTYPE html>
<html lang="en">
<%- include('../../_component/head.ejs', {titleName: '상품 주문'})%>
<body>
    <div class="container my-3">
        <!--메인 화면-->
        <%- include('../../_component/goto_main.ejs')%>
        <h1>상품 주문 페이지</h1>
        <h2>상품 주문</h2>

        <h3>영화관목록</h3>
        <div class="mb-3">
            <select id="theater_select" class="form-control"></select>
        </div>

        <h3>상점목록</h3>
        <div class="mb-3">
            <select id="store_select" class="form-control"></select>
        </div>

        <h3>상품목록</h3>
        <table class="table">
            <thead>
                <th>상품 이름</th>
                <th>상품 유형</th>
                <th>상품 가격</th>
                <th></th>
            </thead>
            <tbody id="item_table"></tbody>
        </table>

        <h3>장바구니</h3>
        <table class="table">
            <thead>
                <th>상품 이름</th>
                <th>상품 가격</th>
                <th>주문 수량</th>
            </thead>
            <tbody id="basket_table"></tbody>
        </table>

        <button id="btn_goto_check" class="btn btn-primary">주문 확인</button>
    </div>

    <script>
    const item_info = {}; // key: item_code, value: item
    const basket_quantity = {}; // key: item_code, value: order_quantity
    let selected_theater = {
        code: null,
        name: null,
    };
    let selected_store = {
        code: null,
        name: null,
    };

    // 페이지가 모두 로드된 후 실행하는 부분
    $(document).ready(() => {
        // 각 id값을 받아와 변수에 저장
        const theater_select = $('#theater_select');
        const store_select = $('#store_select');
        const item_table = $("#item_table")
        const basket_table = $("#basket_table");
        const btn_goto_check = $("#btn_goto_check");

        function clear_basket()
        {
            for (let key in basket_quantity)
            {
                delete basket_quantity[key];
            }
            basket_table.html('');
        }

        init_theater_list();

        // 각 변수에 변화가 일어나는지 감지 (change 이벤트 감지 == addEventListener)
        // 변화가 일어나면 함수를 호출
        theater_select.on('change', () => {
            change_store_list();
            clear_basket();
        });
        store_select.on('change', change_item_table);

        item_table.on('click', '.btn_select_item', add_item_basket_table);
        basket_table.on('click', '.btn_sub_item', sub_item_in_basket);
        basket_table.on('click', '.btn_add_item', add_item_in_basket);

        function clear_item_table()
        {
            clear_basket();
            item_table.html('');
        }

        // 페이지 초반 로드 시 영화관 선택 목록을 만들기 위한 함수
        async function init_theater_list()
        {
            const response_data = await requestPostAPI('/purchase/item/select/init_movie_session');
            const theater_list = response_data.data.theater_list;

            // 리스트 값을 받아서 option 내용을 바꿈
            theater_select.html('');
            theater_select.append($(`<option disabled selected value="">===</option>`));
            for (const theater of theater_list)
            {
                theater_select.append($(`<option value=${theater.theater_code}>${theater.theater_name}</option>`));
            }
        }

        // 영화관을 기준으로 필터링해 상점 목록을 유동적으로 변화시키는 함수
        async function change_store_list()
        {
            // 영화관 데이터를 읽음
            const val_theater = $(theater_select).val();
            
            selected_theater.code = $(theater_select).val();
            selected_theater.name = $(theater_select).text();
            
            // do request
            const data = {theater_code: val_theater};
            const response_data = await requestPostAPI('/purchase/item/select/filter_store', data)
            const store_list = response_data.data.store_list;

            // 리스트 값을 받아서 option 내용을 바꿈
            store_select.html('');
            store_select.append($(`<option disabled selected value="">===</option>`));
            for (const store of store_list)
            {
                store_select.append($(`<option value=${store.store_code}>${store.store_name}</option>`));
            }

            clear_item_table();
            clear_basket();
        }

        // 영화관, 상점 선택 후 상품 목록을 보여주는 함수
        async function change_item_table()
        {
            // 상점 코드를 읽음
            const val_store = $(store_select).val();

            selected_store.code = $(store_select).val();
            selected_store.name = $(store_select).text();

            // do request
            const data = {store_code: val_store};
            const response_data = await requestPostAPI('/purchase/item/select/filter_item', data)
            const item_list = response_data.data.item_list;

            // 리스트 값을 받아서 테이블 내용을 바꿈
            clear_item_table();

            for (const item of item_list)
            {
                item_info[item.item_code] = item;
                item_table.append(
                    `<tr id="${item.item_code}">
                        <td>${item.item_name}</td>
                        <td>${item.item_category}</td>
                        <td>${item.item_price}</td>
                        <td>
                            <button
                                class="btn
                                btn-sm
                                btn-primary
                                btn_select_item"
                                data-id="${item.item_code}">선택
                            </button>
                        </td>
                    </tr>`
                );
            }
        }

        // 장바구니 내 상품 주문수량 변경
        function update_item_quantity(item_code)
        {
            const target = basket_table.find(`tr[data-id=\"${item_code}\"] .order_quantity`);
            target.text(basket_quantity[item_code]);
        }

        // 장바구니 내 상품 갯수를 빼는 함수
        function sub_item_in_basket(event)
        {
            const target_item = $(event.target).parent().parent();
            const item_code = target_item.attr("data-id");
            // 갯수 1 감소
            basket_quantity[item_code] = basket_quantity[item_code] - 1;

            // 해당 상품을 장바구니에서 하나 뺀 후의 갯수가 1개 이상일 때 
            if (basket_quantity[item_code])
            {
                update_item_quantity(item_code);
            }
            // 장바구니에서 하나 뺀 후 갯수가 0개라면 제외
            else
            {
                delete basket_quantity[item_code];
                target_item.remove();
            }
        }

        // 장바구니 내 상품 갯수를 더하는 함수
        function add_item_in_basket(event)
        {
            const target_item = $(event.target).parent().parent();
            const item_code = target_item.attr("data-id");
            basket_quantity[item_code] = basket_quantity[item_code] + 1;
            
            update_item_quantity(item_code);
        }

        // 상품 선택 후 담은 장바구니의 상품 목록을 갱신하는 함수
        // 추가한 후 계속 버튼을 누르면 상품 주문갯수 증가
        async function add_item_basket_table(event)
        {
            const item_code = $(event.target).attr("data-id");
            const item_name = item_info[item_code].item_name;
            const item_price = item_info[item_code].item_price;

            if (basket_quantity[item_code])
            {
                basket_quantity[item_code] = basket_quantity[item_code] + 1;
                update_item_quantity(item_code);
            }
            else 
            {
                basket_quantity[item_code] = 1;
                basket_table.append(
                    `<tr data-id="${item_code}">
                        <td>${item_name}</td>
                        <td>${item_price}</td>
                        <td>
                            <button class="btn btn-sm btn-primary btn_sub_item">-</button>
                            <span class="order_quantity mx-3">${basket_quantity[item_code]}</span>
                            <button class="btn btn-sm btn-primary btn_add_item">+</button>
                        </td>
                    </tr>`
                );
            }
        }

        // 좌석 선택 후 예약 확인 페이지로 넘어가는 버튼
        btn_goto_check.on('click', goto_check);
        
        function goto_check(event)
        {
            const theater_code = selected_theater.code; //????
            const theater_name = selected_theater.name; //????
            const store_code = selected_store.code; //????
            const store_name = selected_store.name; //????
            const basket_list = [];

            for (let item_code in basket_quantity)
            {
                // 장바구니 내용을 basket_list 배열에 넣음
                basket_list.push({
                    item_code: item_code,
                    item_name: item_info[item_code].item_name,
                    item_price: item_info[item_code].item_price,
                    order_quantity: basket_quantity[item_code],
                });
            }
            
            // 장바구니에 항목이 없으면 버튼 작동 비활성화
            if (basket_list.length == 0) return;

            // 필요한 정보를 string으로 변환 후 다음 페이지 요청
            const href = '/purchase/item/check';

            const queryParams = {
                theater_code,
                theater_name,
                store_code,
                store_name,
                basket_list: JSON.stringify(basket_list),
            };
            const queryString = Object.entries(queryParams).map(([key, value]) => `${key}=${encodeURIComponent(value)}`).join('&');

            window.location.href = `${href}?${queryString}`;
        }
    })
    </script>
</body>
</html>
